#include "Map.h"
#include "TextureManager.h"

Map::Map() 
{
    generateMap();
}

void Map::generateMap() {
    
    std::vector<int> tableau = { 
            526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526,
            526, 284, 284, 284, 405, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 407, 284, 284, 284, 526,
            526, 284, 284, 284, 405, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 407, 284, 284, 284, 526,
            526, 284, 284, 284, 445, 446, 446, 446, 446, 446, 406, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 407, 284, 284, 284, 526,
            526, 284, 284, 284, 525, 525, 525, 525, 525, 525, 405, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 407, 284, 284, 284, 526,
            526, 284, 284, 284, 284, 284, 284, 284, 284, 284, 445, 446, 446, 446, 446, 446, 446, 1182, 1182, 446, 446, 446, 446, 446, 446, 447, 284, 284, 284, 526,
            526, 284, 284, 284, 284, 284, 284, 284, 284, 284, 485, 525, 525, 525, 525, 525, 525, 1182, 1182, 525, 525, 525, 525, 525, 525, 525, 284, 284, 284, 526,
            526, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 1182, 1182, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 526,
            526, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 1222, 1222, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 526,
            526, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 1262, 1262, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 526,
            526, 284, 284, 284, 284, 284, 284, 284, 376, 337, 337, 337, 337, 337, 337, 337, 531, 1182, 1182, 532, 337, 337, 337, 337, 337, 377, 284, 284, 284, 526,
            526, 284, 284, 284, 284, 284, 376, 337, 338, 241, 202, 202, 202, 202, 202, 202, 203, 1, 1, 201, 202, 202, 202, 202, 242, 296, 284, 284, 284, 526,
            526, 284, 284, 284, 284, 376, 338, 241, 202, 203, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 161, 296, 284, 284, 284, 526,
            526, 284, 284, 284, 284, 298, 241, 203, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 161, 296, 284, 284, 284, 526,
            526, 284, 284, 284, 376, 338, 163, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 161, 296, 284, 284, 284, 526,
            526, 284, 284, 284, 298, 241, 203, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 161, 296, 284, 284, 284, 526,
            526, 284, 284, 284, 298, 163, 1, 1175, 1176, 1176, 1176, 1176, 1177, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 161, 296, 284, 284, 284, 526,
            526, 284, 284, 284, 298, 163, 1, 1215, 1216, 1216, 1216, 1216, 1217, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 161, 296, 284, 284, 284, 526,
            526, 284, 284, 284, 298, 163, 1, 1215, 1216, 1216, 1216, 1216, 1217, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 161, 296, 284, 284, 284, 526,
            526, 284, 284, 284, 298, 163, 1, 1215, 1216, 1216, 1216, 1216, 1217, 1, 1, 1, 1, 1, 1, 243, 244, 244, 245, 1, 161, 296, 284, 284, 284, 526,
            526, 284, 284, 284, 298, 163, 1, 1215, 1216, 1216, 1216, 1216, 1217, 1, 1, 1, 1, 1, 1, 283, 284, 284, 285, 1, 161, 296, 284, 284, 284, 526,
            526, 284, 284, 284, 298, 163, 1, 1215, 1216, 1216, 1216, 1216, 1217, 1, 1, 1, 1, 1, 1, 283, 284, 284, 285, 1, 161, 296, 284, 284, 284, 526,
            526, 284, 284, 284, 298, 163, 1, 1215, 1216, 1216, 1216, 1216, 1217, 1, 1, 1, 1, 1, 1, 323, 324, 324, 325, 1, 161, 296, 284, 284, 284, 526,
            526, 284, 284, 284, 298, 163, 1, 1255, 1256, 1256, 1256, 1256, 1257, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 161, 296, 284, 284, 284, 526,
            526, 284, 284, 284, 298, 281, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 282, 296, 284, 284, 284, 526,
            526, 284, 284, 284, 416, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 417, 284, 284, 284, 526,
            526, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 526,
            526, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 526,
            526, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 526,
            526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526 };

    for (int i = 0; i < 900; ++i) {
        mapTiles[i / 30][i % 30].getSprite().setTexture(*TextureManager::Instance()->GetTexture(std::to_string(tableau[i])));
        switch (tableau[i])
        {
        case 284:
        case 526:
        case 525:
        case 485:
            mapTiles[i / 30][i % 30].setWalkable(false);
            break;
        default:
            mapTiles[i / 30][i % 30].setWalkable(true);
            break;
        }
    }
}

void Map::draw(sf::RenderWindow& window) {
    for (int i = 0; i < mapHeight; ++i) {
        for (int j = 0; j < mapWidth; ++j) {
            mapTiles[i][j].getSprite().setPosition(j * mapTiles[i][j].getSprite().getGlobalBounds().width, i * mapTiles[i][j].getSprite().getGlobalBounds().width);
            mapTiles[i][j].draw(window);
        }
    }
}
